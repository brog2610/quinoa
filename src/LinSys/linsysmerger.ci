//******************************************************************************
/*!
  \file      src/LinSys/linsysmerger.ci
  \author    J. Bakosi
  \date      Mon 11 May 2015 12:57:52 PM MDT
  \copyright 2012-2015, Jozsef Bakosi.
  \brief     Charm++ module interface file for merging a linear system
  \details   Charm++ module interface file for merging a linear system
*/
//******************************************************************************

module linsysmerger {

  extern module conductor;

  namespace tk {

    // LinSysMerger is templated so that the same code (parameterized by the
    // type given by the template argument, Proxy) can be generated for
    // different types of host proxies. All possible specializations must be
    // listed below.

    // List all possible specializations of templated chare to instantiate
    // registration and delivery of code for the individual specializations

    // Will specialize linear system merger for inciter's Conductor chare
    chare LinSysMerger< inciter::CProxy_Conductor >;

    template< class HostProxy >
    group LinSysMerger {
      entry LinSysMerger( HostProxy& host, std::size_t npoin );
      entry void add(
        int caller,
        const std::map< std::size_t, std::vector< std::size_t > >& psup );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      //
      // Directed Acyclic Graph (DAG):        DAG legend:
      // -----------------------------          WPe  - Query worker PEs
      //                                        Sys  - Create linear system
      // WPe -- Pts                             Pts  - Export mesh points
      //           \                            Init - Initialized
      // Sys ------ Init
      //
      // Interpretation of the above DAG
      // -------------------------------
      // Control flow is from left to right and top to bottom.
      //

      entry void wait4nz() {
        when nz_complete() serial {
          fillMatrix();
        }
      };

      entry void wait4fill() {
        when filled() serial {
          assemble();
        }
      };

      entry void wait4asm() {
        when assembled() serial {
          m_A.print( "hypre_mat" );
          contributeTo( m_host );
        }
      };

      entry void nz_complete();
      entry void filled();
      entry void assembled();
    };

  } // tk::

}
