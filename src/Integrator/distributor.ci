//******************************************************************************
/*!
  \file      src/Integrator/distributor.ci
  \author    J. Bakosi
  \date      Fri 24 Oct 2014 09:40:28 AM MDT
  \copyright 2012-2014, Jozsef Bakosi.
  \brief     Charm++ module interface file for distributor
  \details   Charm++ module interface file for distributor
*/
//******************************************************************************

module distributor {

  // Note that chare Distributor depends on chare Integrator and in turn
  // Integrator depends on Distributor (see also the interface file
  // integrator.ci). This is a mutual dependency and it is made to work with one
  // of the chares (Integrator) being a template chare. Note: if this extern
  // module dependency is removed, the code still compiles but Charm++ generates
  // the wrong code yielding segfaults. See also the Charm++ manual on more
  // information on template chares.
  extern module integrator;

  include "Quinoa/CmdLine/CmdLine.h";
  include "UniPDF.h";
  include "BiPDF.h";
  include "TriPDF.h";

  namespace quinoa {

    chare Distributor {
      entry Distributor( const ctr::CmdLine& cmdline );
      entry void init();
      entry void estimateOrd( const std::vector< tk::real >& ord );
      entry void estimateCen( const std::vector< tk::real >& ctr );
      entry void estimateOrdPDF( const std::vector< UniPDF >& updf,
                                 const std::vector< BiPDF >& bpdf,
                                 const std::vector< TriPDF >& tpdf );
      entry void estimateCenPDF( const std::vector< UniPDF >& updf,
                                 const std::vector< BiPDF >& bpdf,
                                 const std::vector< TriPDF >& tpdf );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger"

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      //
      // Directed Acyclic Graph (DAG):        DAG legend:
      // -----------------------------          AdvP - advance particles
      //                                        OrdM - estimate ordinary moments
      // AdvP -- OrdM -- CenM -- OutS           CenM - estimate central moments
      //     \       \             |            OrdP - estimate ordinary PDFs
      //      OrdP    CenP         |            CenP - estimate central PDFs
      //         \       \         |            OutS - output statistics (mom)
      //           ------ OutP -- EvT           OutP - output PDFs
      //                                        EvT  - Evaluate time step
      //
      // Interpretation of the above DAG
      // -------------------------------
      // Control flow is from left to right and top to bottom.
      //
      // After initialization a time step starts by advancing all particles
      // (AdvP, Integrator::advance()). When that's finished (no global
      // synchronization), each PE starts with the estimation of its portion of
      // the ordinary moments (OrdM). When a PE finished with its part of the
      // estimation of the ordinary moments, it calls back to its host,
      // Distributor, which collects statistics from all PEs. When a PE has
      // finished its accumulation of ordinary moments and has sent its
      // contribution to its host, it immediately continues with estimation of
      // ordinary PDFs (OrdP) (if any), and does not wait for its host.
      //
      // Understanding 'wait4ord'. Once the host has finished collecting
      // partially accumulated ordinary moment (sums) from all PEs, it signals
      // Charm++'s SDAG runtime that all ordinary moments are updated and the
      // estimation of central moments and PDFs can start. This is a necessary
      // synchronization point (central moments can only be estimated about some
      // ordinary moments, i.e., means), realized by two steps: (1) starting off
      // the entry 'wait4ord' (before the time step), which waits for the SDAG
      // signal 'estimateOrdDone', sent by the host. Once the SDAG signal is in,
      // as step (2), the request to start the accumulation of the central
      // moments (CenM) are asynchronously fired off to all PEs followed by a
      // similar request for the central PDFs (CenP) (if any). Once a PE has
      // finished its part of the accumuluation of the central moments, it sends
      // its portion of the sums back to its host which collects from all PEs
      // and finishes the estimation.
      //
      // Understanding 'wait4cen'. Once the host has finished collecting
      // partially accumulated central moment (sums) from all PEs, it signals
      // Charm++'s SDAG runtime that all central moments are updated and the
      // statistics (moments) are ready to be written to disk (OutS) (if
      // scheduled in this step). This is also a necessary synchronization point
      // and done similarly to the one discussed above, but this time by
      // 'wait4cen' and 'estimateCenDone'. Since there may not be any PDFs
      // estimated, having finished estimating the central moments may finish
      // the time step and 'evalulateTime' can be called (EvT). If PDFs are
      // estimated evaluateTyme is called only after the PDFs have been
      // estimated.
      //
      // Understanding 'wait4pdf'. Once a PE has finished its part of the
      // accumuluation of the central PDFs (started from 'wait4ord'), it sends
      // its portion of the sums back to its host which collects from all PEs
      // and finishes the estimation. The host then signals Charm++'s SDAG
      // runtime that all central PDFs have been estimated. This is also a
      // necessary synchronization point and done similarly to the ones
      // discussed above, but this time by 'wait4pdf' waiting for two signals,
      // 'estimateOrdPDFDone' and 'estimateCenPDFDone'. Both the estimation of
      // ordinary and central PDFs must have completed in order to be possible
      // to be written out to disk (OutP) (if scheduled in this time step).
      // According to the logical 'and' relationship here, two 'when' keywords
      // are given in 'wait4pdf'. This enables overlapping OrdP with everything
      // else discussed thus far.
      //
      // The resulting algorithm for a single time step enables overlapping
      // computations and communications. The algorithm has two
      // global synchronization points: (1) it must wait for all particles to be
      // advanced (AdvP), and (2) the final evaluateTime() (EvT) can only happen
      // once all required statistics and PDFs have been estimated and
      // optionally written to disk. Furthermore, there are three partial
      // synchronization points: (1) since central moments and central PDFs can
      // only be estimated about already estimated (and collected) ordinary
      // moments, there is a barrier at OrdM, but this is overlapped with OrdP,
      // (2) since statistics (moments) can only be output to disk if they all
      // have been estimated and collected, there is a barrier at CenM, but this
      // is overlapped with OrdP, CenP, and OutP, and (3) since PDF can only be
      // output to disk if they all have been estimated and collected, there is
      // a barrier at CenP, but this is overlapped with OrdP, OrdM, CenM, and
      // OutS.

      // SDAG wait-for: wait for ordinary moments to have been estimated
      entry void wait4ord() {
        when estimateOrdDone() serial {
          // Start accumulating sums for central moments (every time step)
          for (auto& p : m_proxy) p.accumulateCen( m_ordinary );
          // Start accumulating sums for central PDFs at select times
          if ( !(m_it % g_inputdeck.get< tag::interval, tag::pdf >()) )
            for (auto& p : m_proxy) p.accumulateCenPDF( m_ordinary );
        }
      };

      // SDAG wait-for: wait for central moments to have been estimated
      entry void wait4cen() {
        when estimateCenDone() serial {
          // Output statistics to file
          outStat();
          // If PDFs not estimated, evaluate time step and compute new time step
          if ( m_it % g_inputdeck.get< tag::interval, tag::pdf >() )
            evaluateTime();
        }
      };

      // SDAG wait-for: wait for PDFs to have been estimated, the two 'when'
      // statements are undestood with a logical AND between them
      entry void wait4pdf() {
        when estimateOrdPDFDone()
        when estimateCenPDFDone() serial {
          outPDF();             // output PDFs to file
          evaluateTime();       // evaluate time step, compute new time step
        }
      };

      // SDAG trigger signaling that ordinary moments have been estimated
      entry void estimateOrdDone();
      // SDAG trigger signaling that central moments have been estimated
      entry void estimateCenDone();
      // SDAG trigger signaling that ordinary PDFs have been estimated
      entry void estimateOrdPDFDone();
      // SDAG trigger signaling that central PDFs have been estimated
      entry void estimateCenPDFDone();
    }

  } // quinoa::

}
