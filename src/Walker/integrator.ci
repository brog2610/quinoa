//******************************************************************************
/*!
  \file      src/Walker/integrator.ci
  \author    J. Bakosi
  \date      Thu 19 Mar 2015 07:35:24 AM MDT
  \copyright 2012-2015, Jozsef Bakosi.
  \brief     Charm++ module interface file for Integrator
  \details   Charm++ module interface file for Integrator
*/
//******************************************************************************

module integrator {

  // Note that template chare Integrator depends on chare Distributor and in
  // turn Distributor depends on Integrator (see also the interface file
  // montecarlo.ci). This is a mutual dependency and it is made to work with
  // one of the chares (Integrator) being a template chare. Note: if this
  // extern module dependency is removed the code does not compile. See also
  // the Charm++ manual on more information on template chares.
  extern module distributor;

  namespace walker {

    // List all possible specializations of templated chare to instantiate
    // registration and delivery of code for the individual specializations
    chare Integrator< CProxy_Distributor >;

    template< class Proxy >
    chare Integrator {
      entry Integrator( Proxy& proxy,
                        uint64_t npar,
                        tk::real dt,
                        uint64_t it,
                        const std::map< tk::ctr::Product, tk::real >& moments );
      entry void advance( tk::real dt,
                          uint64_t it,
                          const std::map< tk::ctr::Product, tk::real >& moments
      );
      entry void accumulateOrd();
      entry void accumulateCen( const std::vector< tk::real >& ord );
      entry void accumulateOrdPDF();
      entry void accumulateCenPDF( const std::vector< tk::real >& ord );
    }

  } // walker::

}
