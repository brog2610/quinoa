#ifndef BASKER_SOLVE_RHS_HPP
#define BASKER_SOLVE_RHS_HPP

/*Basker Includes*/
#include "basker_decl.hpp"
#include "basker_matrix_decl.hpp"
#include "basker_matrix_view_decl.hpp"
#include "basker_types.hpp"
#include "basker_util.hpp"

/*Kokkos Includes*/
#ifdef BASKER_KOKKOS
#include <Kokkos_Core.hpp>
#include <impl/Kokkos_Timer.hpp>
#else
#include <omp.h>
#endif

/*System Includes*/
#include <iostream>
#include <string>

using namespace std;

namespace BaskerNS
{

  //Solve Struct
  template <class Int, class Entry, class Exe_Space>
  struct kokkos_solve_rhs_funct
  {
    #ifdef BASKER_KOKKOS
    typedef Exe_Space                        execution_space;
    typedef Kokkos::TeamPolicy<Exe_Space>    TeamPolicy;
    typedef typename TeamPolicy::member_type TeamMember;
    #endif
    
    Basker<Int,Entry,Exe_Space> *basker;
    
    kokkos_solve_rhs_funct()
    {}

    kokkos_solve_rhs_funct(Basker<Int,Entry,Exe_Space>* _basker)
    {basker = _basker;}

    BASKER_INLINE
    #ifdef BASKER_KOKKOS 
    void operator()(const TeamMember &thread) const
    #else
    void operator()(Int kid) const
    #endif
    {
      #ifdef BASKER_KOKKOS
      Int kid = (Int)(thread.league_rank()*thread.team_size()+
		      thread.team_rank());
      Int team_leader = (Int)(thread.league_rank()*
			      thread.team_size());
      #else
      Int team_leader = 0;
      #endif
      //Note:come back

    }//end operator()
  };//end struct kokkos_solve_rhs

  template <class Int, class Entry, class Exe_Space>
  struct kokkos_init_solve_rhs_funct
  {
    #ifdef BASKER_KOKKOS
    typedef Exe_Space                        execution_space;
    typedef Kokkos::TeamPolicy<Exe_Space>    TeamPolicy;
    typedef typename TeamPolicy::member_type TeamMember;
    #endif

    Basker<Int,Entry,Exe_Space> *basker;
    Entry *b;
    Entry *x;
    
    kokkos_init_solve_rhs_funct()
    {}

    kokkos_init_solve_rhs_funct(Basker<Int,Entry,Exe_Space> * _basker,
				Entry         *_x,
				Entry         *_b)
    {
      basker = _basker;
      b = _b;
      x = _x;
    }//end kokkos_init_solve_rhs_funct

    BASKER_INLINE
    #ifdef BASKER_KOKKOS 
    void operator()(const TeamMember &thread) const
    #else
    void operator()(Int kid) const
    #endif
    {
      #ifdef BASKER_KOKKOS
      Int kid = (Int)(thread.league_rank()*thread.team_size()+
		      thread.team_rank());
      Int team_leader = (Int)(thread.league_rank()*
			      thread.team_size());
      #else
      Int team_leader = 0;
      #endif

      basker->t_init_solve_rhs(kid, x, b);
 
      //Note:come back
    }//end operator()
  };//end struct kokkos_init_solve_rhs

  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::test_solve()
  {
    ENTRY_1DARRAY  x_known;
    ENTRY_1DARRAY  x;
    ENTRY_1DARRAY  y;

    MALLOC_ENTRY_1DARRAY(x_known, gn);
    init_value(x_known, gn , (Entry)1.0);
    MALLOC_ENTRY_1DARRAY(x, gn);
    init_value(x, gn, (Entry) 0.0);
    MALLOC_ENTRY_1DARRAY(y, gm);
    init_value(y, gm, (Entry) 0.0);
    
    spmv(A,x_known,y);
    if(Options.btf == BASKER_TRUE)
      {
	spmv(BTF_B, x_known, y);
	spmv(BTF_C, x_known, y);
      }
    
    #ifdef BASKER_DEBUG_SOLVE_RHS
    printf("\n\n");
    printf("Known Solution: \n");
    for(Int i = 0; i < gn; i++)
      {
	printf("%f, " , x_known[i]);
      }
    printf("\n\n");
    printf("RHS: \n");
    for(Int i =0; i < gm; i++)
      {
	printf("%f, ", y); 
      }
    printf("\n\n");
    #endif

    Solve(y, x);
   
  }//end test_solve


  //Horrible, cheap spmv
  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::spmv(BASKER_MATRIX &M,
					ENTRY_1DARRAY x,
					ENTRY_1DARRAY y)
  {
    //Add checks
    for(Int k=M.scol; k < (M.scol+M.ncol); k++)
      {
	for(Int i = M.col_ptr[k]; i < M.col_ptr[k+1]; i++)
	  {
	    Int j = M.row_idx[i];
	    y[j] += M.val[i]*x[k];
	  }
      }

  }//spmv


  //malloc and init solve vector across threads
  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int, Entry, Exe_Space>::malloc_init_solve(
                                                       Int _nrhs,
                                                       Entry *x, 
                                                       Entry *b)
  {

    nrhs = _nrhs;
    MALLOC_ENTRY_2DARRAY(rhs,nrhs);
    MALLOC_ENTRY_2DARRAY(sol,nrhs);

    for(Int i = 0; i < nrhs; i++)
      {
	MALLOC_ENTRY_1DARRAY(rhs[i], A.nrow);
	MALLOC_ENTRY_1DARRAY(sol[i], A.ncol);
      }
    
    //Copy in
    #ifdef BASKER_KOKKOS
    typedef Kokkos::TeamPolicy<Exe_Space>    TeamPolicy;
    typedef typename TeamPolicy::member_type MemberType;
    #ifdef BASKER_NO_LAMBDA
    kokkos_init_solve_rhs_funct<Int, Entry, Exe_Space> 
      sF(this, x, b);
    Kokkos::parallel_for(TeamPolicy(num_threads,1), sF);
    Kokkos::fence();
    #else  //else BASKER_NO_LAMBDA

    #endif //endif BASKER_NO_LAMBDA
    #else

    #endif
    
    return 0;
  }//end malloc_init_solve()

  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::t_init_solve_rhs(Int kid, 
				          Entry *x, Entry *b)
  {
    for(Int k = 0; k < nrhs; k++)
        {
          //over every lvl
          for(Int l = 0; l <= tree.nlvls; l++)
            {
              //if((l==0) || (kid%l == 0))
              if(kid%(l+1) == 0)
                {
                  Int U_col = S[l][kid];
                  Int U_row = LU_size[U_col]-1;
                  
                  Int scol = LU[U_col][U_row].scol;
                  Int ecol = LU[U_col][U_row].ncol + scol;

                  #ifdef BASKER_DEBUG_SOLVE
                  printf("kid: %d lvl: %d U_col: %d U_row: %d scol: %d ecol: %d \n",
                         kid, l, U_col, U_row, scol, ecol);
                  #endif
                  
                  for(Int j = scol; j < ecol; j++)
                    {
                      Int pj = gperm[j];
		      Int offset = j; //Note:come back and fix
		      
		      //Ax=b flip for reuse
                      rhs[k][pj] = x[offset]; 
                      sol[k][pj] = b[offset];
                    } //over nnz in my section
                }//if correct KID
            }//end over lvl (l)
        }//over each column(k) 
    return 0;
  }//end t_init_solve_rhs()

  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::serial_solve
  (
   ENTRY_1DARRAY y,
   ENTRY_1DARRAY x
   )
  {





  }//end serial solve()





  //Main private function call for parallel RHS solve
  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int, Entry, Exe_Space>::solve(Int kid)
  {
    
    #ifdef BASKER_KOKKOS
    typedef Kokkos::TeamPolicy<Exe_Space>     TeamPolicy;
    typedef typename TeamPolicy::member_type  MemeberType;
    #ifdef BASKER_NO_LAMBDA
    kokkos_solve_rhs_funct<Int,Entry,Exe_Space> sF(this);
    Kokkos::parallel_for(TeamPolicy(num_threads, 1), sF);
    Kokkos::fence();
    #else //BASKER_NO_LAMBDA

    #endif //BASKER_NO_LAMBDA
    #else //BASKER_KOKKOS

    #endif

    solve_flag = true;
    return 0; 
  }//end solve()

  //parallel lower_tri solve
  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::lower_tri_solve(Int kid)
  {
    for(Int l = 0 ; l <= tree.nlvls; l++)
      {
	if(kid%((Int)pow(2,l))==0)
	  {
	    t_lower_tri_solve(kid, l);
	  }
      }
    return 0;
  }//end lower_tri()

  //parallel upper tri solve
  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::upper_tri_solve(Int kid)
  {
    for(Int l=tree.nlvls; l>=0; l--)
    {
      if(kid%((Int)pow(2,l)) == 0)
	{
	  t_upper_tri_solve(kid, l);
	}//if correct number
    }//for over all lvls
    
    return 0;
  }//end uper_tri()
  
  
  //Note: nrhs should be moved in to improve reuse
  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int, Entry, Exe_Space>::t_lower_tri_solve(Int kid,
						       Int l)
  {
    Int            b = S[l][kid];
    BASKER_MATRIX &L = LL[b][0];
    //over all rhs
    for(Int i=0; i <nrhs ; i++)
      {
        //over all columns
        for(Int k = 0; k < L.ncol; k++)
          {
            if(L.val[L.col_ptr[k]] == (Entry) 0)
              {
                printf("b: %d L found zero pivot in column: %d \n",
                       b, k+L.scol);
                return -1;
              }
          
            #ifdef BASKER_DEBUG_SOLVE
            printf("kid b(1) = %f \n", sol[i][1]); 
            printf("L_index: %d %d x(%d) = %f b(%d) = %f\n",
                   b, i , k+L.scol,  rhs[i][k+L.scol],
		   k+L.scol, sol[i][k+L.scol]);
            #endif

            rhs[i][k+L.scol] = sol[i][k+L.scol] / L.val[L.col_ptr[k]];
            
            //Over each nnz in column
            for(Int j = L.col_ptr[k]+1; j < L.col_ptr[k+1]; j++)
              {
                Int loc = gperm[L.row_idx[j]];
                
                #ifdef BASKER_DEBUG_SOLVE
                printf("kid %d L update b: %d %d %f  value: %f %f \n",
                       kid, i,loc, sol[i][loc], L.val[j], rhs[i][k+L.scol]);
                #endif

		rhs[i][loc] -= L.val[j]*rhs[i][k+L.scol];
		
                //Add Atomic: come back... only do atomics for shared vals
		#ifdef BASKER_KOKKOS
                Kokkos::atomic_fetch_sub(&(rhs[i][loc]),
                                         L.val[j]*sol[i][k+L.scol]);
		#endif
              }//end overall nnz in column
          }//end over all columns
      }//end over all rhs
    return 0;
  }//end t_lower_tri_solve()

  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::t_upper_tri_solve(Int kid, 
						     Int l)
  {

    Int            b = S[l][kid];
    BASKER_MATRIX &U = LU[b][LU_size[b]-1];
     //over all rhs
    for(Int i=0; i < A.nrow; i++)
      {
         //over all columns
        for(Int k = U.ncol-1; k > 0; k--)
          {
            
            if(U.val[U.col_ptr[k+1]-1] == (Entry) 0)
              {
                printf("U_col: %d U found zero pivot in column: %d \n",
                       b, k+U.scol);
              }
            
            #ifdef BASKER_DEBUG_SOLVE
            printf("U_col: %d x(%d) = %f b(%d) = %f U.val: %f \n",
                   b, k+U.scol, sol[i][k+U.scol], 
                   k+U.scol, rhs[i][k+U.scol], 
                   U.val[U.col_ptr[k+1]-1]);
            #endif
  
            sol[i][k+U.scol] = rhs[i][k+U.scol] / U.val[U.col_ptr[k+1]-1];

            //Over each nnz in column
            for(Int j = U.col_ptr[k+1]-2; j >= U.col_ptr[k]; j--)
              {
                Int loc = U.row_idx[j];
                //No need for atomic, only over own blk
                sol[i][loc] = rhs[i][loc] -
		  U.val[j]*sol[i][k+U.scol];
              }//end overall nnz in column
          }//end over all columns
        sol[i][U.scol] = rhs[i][U.scol]/U.val[0];
      }//end over all rhs
    return 0;
  }//end t_upper_tri_solve()

  template <class Int, class Entry, class Exe_Space>
  BASKER_INLINE
  int Basker<Int,Entry,Exe_Space>::t_spmv_update(Int kid, Int l)
  {
    
    /*
    Int            b = S[b][l];
    BASKER_MATRIX &U = LU[b][row_index];
    */
    return 0;
  }//end local_spmv_update()
}//end namespace Basker
#endif //end ifndef basker_solver_rhs
