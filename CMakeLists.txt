CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)
INCLUDE(CheckIncludeFiles)
INCLUDE(TestBigEndian)
INCLUDE(CheckCSourceCompiles)
INCLUDE(cmake/macros.cmake)
PROJECT(libaec)
SET(libaec_VERSION_MAJOR 0)
SET(libaec_VERSION_MINOR 3)
SET(libaec_VERSION_PATCH 2)
SET(CMAKE_BUILD_TYPE Release)
ENABLE_TESTING()

CHECK_INCLUDE_FILES(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
CHECK_CLZLL(HAVE_DECL___BUILTIN_CLZLL)
IF(NOT HAVE_DECL___BUILTIN_CLZLL)
  CHECK_BSR64(HAVE_BSR64)
ENDIF(NOT HAVE_DECL___BUILTIN_CLZLL)
FIND_INLINE_KEYWORD()
FIND_RESTRICT_KEYWORD()

CONFIGURE_FILE(
  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/config.h
  )
ADD_DEFINITIONS("-DHAVE_CONFIG_H")

# Allow the developer to select if Dynamic or Static libraries are built
OPTION(BUILD_SHARED_LIBS "Build Shared Libraries" ON)
IF(BUILD_SHARED_LIBS)
  SET (LIB_TYPE SHARED)
ELSE(BUILD_SHARED_LIBS)
  IF(WIN32)
    MESSAGE(WARNING "You will have to modify libaec.h for static libs.")
  ENDIF(WIN32)
  SET(LIB_TYPE STATIC)
ENDIF(BUILD_SHARED_LIBS)

INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}")
INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}/src")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/src")

ADD_SUBDIRECTORY(src)
# EXCLUDE_FROM_ALL doesn't seem to be working in VS
ADD_SUBDIRECTORY(tests)

SET(CPACK_PACKAGE_NAME "libaec")
SET(CPACK_PACKAGE_VENDOR "dkrz.de")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY
  "libaec - Adaptive Entropy Coding library")
SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "3")
SET(CPACK_PACKAGE_VERSION_PATCH "2")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "libaec")
SET(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/COPYING")
SET(CPACK_RESOURCE_FILE_README "${PROJECT_SOURCE_DIR}/README")

IF(CMAKE_CL_64)
  SET(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES64")
  SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY
    "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION} (Win64)")
ELSE(CMAKE_CL_64)
  SET(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES")
  SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY
    "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
ENDIF(CMAKE_CL_64)

INCLUDE(CPack)
