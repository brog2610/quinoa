################################################################################
# vim: filetype=dockerfile:
#
# \file      docker/Dockerfile.quinoa-build-dev
# \author    J. Bakosi
# \copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.
# \brief     Dockerfile for a setting up full development environment for Quinoa
# \date      Sun 12 Jun 2016 04:21:39 PM MDT
#
################################################################################

# Dockerfile for setting up a complete development environment in a docker
# container for Quinoa.

# We start from the Debian/testing Linux distribution and install all possible
# prerequisites, multiple compilers with OpenMPI, etc., and thus setup a
# complete development environment. This docker image is
# intended for developers

# WARNING: This container contains proprietary software, such as Intel's C++ and
# Fortran Compilers and the MKL library, and thus the container image is not to
# be publicly distributed.
#
# Prerequisites that must be supplied before this container can be built:
#
# (1) Intel's C++ and Fortran Compilers and the MKL library, previously
#     installed in /opt/intel, then copied to <quinoa>/docker/intel.

FROM debian:testing
MAINTAINER Jozsef Bakosi <jbakosi@lanl.gov>

# From behind LANL firewall
ENV http_proxy http://proxyout.lanl.gov:8080/
ENV https_proxy https://proxyout.lanl.gov:8080/

# Install system-wide prerequisites, including gcc and clang
RUN apt-get -y update && apt-get install -y debian-keyring debian-archive-keyring wget
RUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -
RUN echo "deb http://ftp.us.debian.org/debian testing main non-free contrib \n deb http://security.debian.org testing/updates main contrib non-free \n deb http://llvm.org/apt/jessie/ llvm-toolchain-jessie main \n deb http://llvm.org/apt/unstable/ llvm-toolchain main" > /etc/apt/sources.list
RUN apt-get -y update && apt-get install -y m4 sudo zlib1g-dev procps cpio git cmake gfortran gcc g++ clang-3.8 libc++-dev libc++abi-dev environment-modules libpugixml-dev libpstreams-dev libboost-all-dev liblapack-dev liblapacke-dev libhdf5-dev libhdf5-openmpi-dev libhypre-dev ninja-build gmsh

# Copy over install of Intel Parallel Studio XE Professional Edition for Fortran and C++ Linux
COPY intel /opt/intel

# Switch to bash for the rest of the build (needed for environment-modules below)
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# Populate and setup environment modules
RUN mkdir -p /usr/share/modules/modulefiles/gnu /usr/share/modules/modulefiles/clang /usr/share/modules/modulefiles/intel /usr/share/modules/modulefiles/mkl /usr/share/modules/modulefiles/openmpi/1.10.2/gnu /usr/share/modules/modulefiles/openmpi/1.10.2/clang /usr/share/modules/modulefiles/openmpi/1.10.2/intel
COPY modules/gnu/system /usr/share/modules/modulefiles/gnu/
COPY modules/openmpi/1.10.2/gnu/system /usr/share/modules/modulefiles/openmpi/1.10.2/gnu/
COPY modules/clang/system /usr/share/modules/modulefiles/clang/
COPY modules/openmpi/1.10.2/clang/system /usr/share/modules/modulefiles/openmpi/1.10.2/clang/
COPY modules/intel/latest /usr/share/modules/modulefiles/intel/
COPY modules/openmpi/1.10.2/intel/latest /usr/share/modules/modulefiles/openmpi/1.10.2/intel/
COPY modules/mkl/latest /usr/share/modules/modulefiles/mkl/

# Install OpenMPI with gnu, clang, intel
ADD https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.2.tar.bz2 /install/
RUN cd /install/ && tar xjf openmpi-1.10.2.tar.bz2
RUN source /usr/share/modules/init/bash && module load gnu/system && cd /install/openmpi-1.10.2 && ./configure --prefix=/opt/openmpi/1.10.2/gnu/system && make -sj$((`cat /proc/cpuinfo | grep MHz | wc -l`/4)) install
RUN source /usr/share/modules/init/bash && module load clang/system && cd /install/openmpi-1.10.2 && ./configure --prefix=/opt/openmpi/1.10.2/clang/system && make -sj$((`cat /proc/cpuinfo | grep MHz | wc -l`/4)) install
RUN source /usr/share/modules/init/bash && module load intel/latest && cd /install/openmpi-1.10.2 && ./configure --prefix=/opt/openmpi/1.10.2/intel/latest && make -sj$((`cat /proc/cpuinfo | grep MHz | wc -l`/4)) install
RUN rm -rf /install/openmpi-1.10.2

# Remove /install - no more installs after this line
RUN rm -rf /install

# Copy init script used to initialize interactive shell and ncpus query script
COPY init.sh cpus.sh /home/quinoa/
# Create a non-root user 'quinoa' that can sudo without password
RUN groupadd -r quinoa -g 433 && useradd -u 431 -r -g quinoa -d /home/quinoa -s /sbin/nologin -c "Quinoa" quinoa && echo "quinoa:quinoa" | chpasswd && adduser quinoa sudo && echo "quinoa ALL = NOPASSWD : ALL" > /etc/sudoers.d/quinoa && chmod 0440 /etc/sudoers.d/quinoa && chown -R quinoa:quinoa /home/quinoa
# Make init script as the entry point
ENTRYPOINT ["/home/quinoa/init.sh"]
# Switch default user to 'quinoa' and change default work directory
USER quinoa
WORKDIR /home/quinoa
# Set bash as default interactive shell
CMD ["/bin/bash"]
