/*!
  \page      sde Stochastic differential equations design

General requirements
--------------------
Numerical time integration of stochastic differential equations (SDE) is
probably the single most important ingredient. This must be:
 - Efficient
 - Maintainable
 - The design must scale well with adding new functionality, i.e., adding new
   equations and/or new models for already implemented equations should
   require as little code as possible
 - Should easily accommodate various advancement algorithms on different
   hardware end/or using various parallelization strategies

There should be a possibility to quickly prototype a new SDE, e.g., in a
test-bed class. This is used to:
 - Verify its invariant PDF
 - Explore the behavior of its statistics
 - Integrate multiple variables (coupled or non-coupled)

Questions:
 - Should SDE base hold a single RNG used by all specific (derived) SDEs or
   different SDEs should be able to instantiate and use their own (possibly
   different) RNGs?
 - What new requirements and constraints does spatial inhomogeneity entail?

Requirements on SDE base
------------------------
SDEs should inherit at least from one base class (if a multiple-policy design is
adopted) that should have SDE-generic data and member functions, which
facilitates code-reuse.

Base SDE class should work for both N = 1 or N > 1, i.e., single-variate or
multi-variate SDEs.

Base SDE class should have pure virtual interfaces for:
 - Initialization of the particles at t = 0, e.g., init()
 - Advancing the particles in time, e.g., advance()

Possible policies of an SDE base class:

__Initialization policy__

Specifies how the initialization of the particles happen at t = 0. Possible
initialization policies:
 - Do nothing: leave memory associated to particle data uninitialized
 - Zero: zero particle properties
 - Fill with one given constant: single-delta-spike PDF
 - Fill with different constants given per variable
 - Sample from given PDF, N = 1
 - Sample from different PDF given per variable, N > 1 (independent)
 - Sample from given JPDF, N > 1 (possibly non-independent)
 - Pre-cycle properties using a given SDE and its constant coefficients for:
   + a given time period
   + a given number of time steps
   + until convergence is reached for given statistics and convergence criteria

__Time-integration policy__

Specifies what time-integrator to use when advancing particles. Possible
time-integration policies:
 - Euler-Maruyama
 - Milstein
 - Runge-Kutta (with various orders)
 - Various other explicit and implicit integrators, see Kloeden & Platen

Specific SDE types (e.g., Ornstein-Uhlenbeck, Dirichlet, skew-normal, etc),
should derive from the SDE base class, forwarding base class policies, i.e., a
specific SDE class should not hard-code any base class policy.

Specific SDE classes may have their own policies (specific to the given SDE).

__Questions:__
 - What new requirements and constraints does spatial inhomogeneity entail?

Requirements on SDE Dirichlet
-----------------------------

1. Should derive from SDE base

2. Dirichlet SDE possible policies:

 - Coefficients policy:

   Specifies how the coefficients, b, S, and kappa, are used by the SDE.
   Possible coefficients policies:
    + Constant: initialized once, used for all t > 0 (e.g., for testing)
    + Functional: advance() algorithm queries coefficients at every update
      via functions, e.g., b(time, various statistics)

 - Questions:
   + What new requirements and constraints does spatial inhomogeneity entail?
     This may only affect a functional coefficients policy that is used to
     define a spatially inhomogeneous Dirichlet SDE model.

<hr>
<div><small>
<em>Page last updated:</em> Fri 11 Jul 2014 09:42:16 PM MDT
<em>Copyright 2012-2014, Jozsef Bakosi.</em>
</small></div>
*/
