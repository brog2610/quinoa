/*!
  \page      algorithm Algorithm design

Here are the priorities for contributing to Quinoa, listed most important first:

1. __Correctness__ --
Correct results, resilience against errors, fault tolerance.

2. __Performance__ --
Maximize FLOPS, minimize communication.

3. __Power consumption__ --
Minimize power required for given performance.

4. __Maintainability, easy to read__ --
Maximize code-reuse.

5. __Easy to write__ --
Optimize code for being read even at the expense of making code harder to write.

Requirements
------------
Some mechanism, preferably the runtime system with some help from the
application, should monitor the first three aspects and dynamically influence
the algorithm. This requires runtime introspection, which must be designed into
the algorithms from the outset. 

Quinoa uses the [Charm++](http://charm.cs.illinois.edu) runtime system capable
of runtime introspection. Charm++ facilitates task-based parallelism, automatic
load balancing through network-migration of objects, and enables coping with
hardware heterogeneity and system failure.

<hr>
<div><small>
<em>Page last updated:</em> Tue 07 Jul 2015 08:22:49 AM MDT
<em>Copyright 2012-2015, Jozsef Bakosi.</em>
</small></div>
*/
