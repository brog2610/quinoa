/*!
  \page      todo To-do list

### Parser/Control
 - Replace the overloads in Control.h with variadic ones: the implementation
   of Field template may give a clue on how to do the variadic deep-access
   for types in tagged tuple, see AA (Modern C++ Design) p69.
 - Warn on what is set ends up not being used
 - Add logger: Useful? Requirements? Pantheios? Glog? Boost.Log?
 - Operator << for tagged tuple (e.g., for debugging purposes)? See STL 5.1.3
 - Put in error trap if depvars are the same for two SDEs given
 - Using the defaults for an RNG in the rngs - end block should not require
   an 'end', as that is not so user-friendly
 - Add type, default, bounds fields to keyword and possibly others.
 - Add command line help with short and long help on keywords.
 - Add commandline option --version
 - Trigger parser error on non-existent field-id, besides the existing dependent
   variable.
 - Add to on-screen help: search for a string in any fields instead of only a
   correct keyword.
 - Fix Base::Print::splitLines() so that lines longer than 'width' do not hang.

### RNGTest
 - RNGSSE:
    + Put in gaussian(): Gaussian distribution from uniform: STL
    + Can RNGSSE's generators take a seed?
    + Hook up SSE versions
    + Hook up GPU versions
 - Find and add RNG library alternative to MKL and RNGSSE that works with
   threads: MKL is non-free and RNGSSE does not work on Mac OS (probably due
   to its assembly code), cuRAND, Random123?
 - Implement a fall-back RNG (Boost?, STL?) that guaranteed to work everywhere.
   (RNGSSE's assembly does not work on ARM.)
 - Detect architecture. If not x86, don't try to build RNGSSE.
 - Add --all command-line argument to simply test all available RNGs without any
   control file.

### Testing
 - Quantify code coverage by tests, e.g., COVTOOL: http://covtool.sourceforge.net
 - Regression tests with KitWare's CTest, see
   http://www.cmake.org/Wiki/CMake/Testing_With_CTest
 - Test build with optional libraries on/off (all permutations)
 - Test suite for exceptions:
    + Automatically switch each potential throw location into a throw (is this
      even possible?) and test for clean exit (test with e.g. valgrind)
    + valgrind can return a different exit code based on errors detected
      using the command line argument --error-exitcode= to valgrind
 - Memory testing: CMake/CTest/CDash has built-in support for automated
   memory testing using valgrind
 - Clang's sanitizers: address, thread, memory, undefined behavior, etc.
 - Add dynamic analysis tests to ctest and cdash: http://www.kitware.com/blog/home/post/762

### Build
 - Get rid of the optional build of Trilinos/SEACAS (but keep ExodusII) as
   SEACAS is LGPL (but Exodus is BSD)
 - Inquire about a TestU01 commercial license
 - Reduce build deps with ninja build dependency map
 - Explore dynamic libs, precompiled headers
   (https://github.com/ducakar/openzone/ uses pch cmake and clang)
 - Revisit intel-specific compiler arguments; make all non-global if possible
 - Switch as many TPLs to optional as make sense
 - Echo "all optional libraries found" or what's missing at what path
 - Make executables optional
 - Make children of MonteCarlo optional
 - Make children of SDEs optional
 - Make coefficients policies optional
 - Document what is optional
 - Consider safe mode STL for development: -D_GLIBCXX_DEBUG, see STL 6.12.1
 - Setup separate distribution of modules/executables. Via sub-repos? See
   http://stackoverflow.com/questions/359424/detach-subdirectory-into-separate-git-repository/359759#359759
 - Add support for PGI (if C++11 is complete)
 - Re-enable SiloWriter using libsilo-dev
 - Explore build without MPI
 - Platforms:
    + arm: see tpl/README.build.charm
    + helios-gnu
    + titan-gnu
    + mac-clang
    + win-gnu: http://tdm-gcc.tdragon.net/download
    + win-mingw: http://sourceforge.net/projects/mingwbuilds

### MeshConv
 - Add side/node sets
 - Add of extra features, e.g., renumbering, partitioning, etc.
 - Should STLMesh use UnsMesh instead?

### Documentation
 - Add to-level LICENSE and README (describing how to build tpl, code, and doc)
 - Double-check boost modules licenses
 - Clarify TestU01 license with author
 - Find out build prerequisites (i.e., everyting that is linked in) and document
   them in README.build
 - Document remaining undocumented keywords
 - Automatic generation of grammar/parser documentation
 - Fill details on TPL page
 - Find alternatives to Doxygen that work better with heavily templated code
 - Add separate page to doxygen on papers with links
 - Add and hook up optional field specifying default expected value to keywords

### Uncategorized
 - Charm++ codes to explore: GTC, NAMD, LeanMD, Mol3D

 - Charm++ codes using structured AMR:
   - Cello: http://client64-249.sdsc.edu/cello
   - Chombo: https://commons.lbl.gov/display/chombo/Chombo+-+Software+for+Adaptive+Solutions+of+Partial+Differential+Equations

 - Charm++'s CkIO in action:
   - ChaNGa http://librarian.phys.washington.edu/astro/index.php/Research:ChaNGa
   - Contact: Tom Quinn, trq@astro.washington.edu
   - The code using CkIO starts in Main::outputBinary() in InOutput.C.

 - As the estimation of statistics should be closer (i.e., immediately after)
   updating the particle properties, the order of the particle properties in
   memory should be user-selectable at compile time

 - Make ErrChkMPI work even if there is no MPI

 - emplace() is only more efficient than insert() if it calls a constructor
   internally instead of assignment() - check

 - Consider using clang-format + vi-plugin

 - Fix field/column lengths in IO/TxtStatWriter.

 - Explore kernel density estimation for outputing PDFs instead of only the
   histogram

 - Use std::to_string() to convert a number to a string

 - Add floating point exception handler, e.g., based on fenv.h, see also:
   http://neugierig.org/software/blog/2012/06/backtraces.html

 - Fix destructors: If no exception-specification is provided, the
   exception-specification is one that that would be used by the
   implicitly-declared destructor. In most cases, this is noexcept(true).

 - Use noexcept and conditional noexcept. See STL 3.1.7.

 - Timer: add clocks info to timer. See STL 5.7.3. Add wall, user, system
   breakdown, see how at http://www.boost.org/doc/libs/release/libs/timer/

 - valarrays eligible for more aggressive optimizations, especially on multicore?

 - Any libs for concurrent containers? Would be nice for PDF/JPDF. TBB, NVIDIA
   Thrust?

 - Explore the use of Eric Niebler's concept checking "library",
   http://ericniebler.com/2013/11/23/concept-checking-in-c11/

 - Use static_assert for templates, see e.g., http://cxxninjitsu.blogspot.com/2013/12/staticassert-better-template-error.html?m=1

 - Pass strings and other function argument types that need copies and do not need to be modified by value, see http://stackoverflow.com/questions/16724657/why-do-we-copy-then-move

<hr>
<div><small>
<em>Page last updated:</em> Wed 08 Apr 2015 08:35:59 AM MDT
<em>Copyright 2012-2015, Jozsef Bakosi.</em>
</small></div>
*/
