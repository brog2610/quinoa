/*!
  \page      io Input/Output for PIC-based inhomogeneity strategy

For more on PIC-based inhomogeneity strategy, see [inhomogeneity
strategies](inhomogeneity.html).

Input format requirements
-------------------------
An algorithm based on a PIC-based inhomogeneity strategy requires an Eulerian
mesh. At this time, the plan is to keep it simple, and only support a Cartesian
mesh for structured grid-applications and pure-tetrahedron unstructured meshes.
Examples of supported mesh generators:

  - Gmsh, http://www.geuz.org/gmsh
  - Netgen, http://sourceforge.net/apps/mediawiki/netgen-mesher
  - Cubit, https://cubit.sandia.gov
  - Any other generator that outputs the input formats below

Input mesh file formats supported:
  - Gmsh ASCII
  - Gmsh Binary
  - Netgen Neutral
  - ExodusII HDF5 (.h5 from Hexpress/Hybrid)
  - Quinoa native (based on ADIOS schema and .bp)

Output types
------------
  1. Eulerian-mesh
  2. Checkpoint-Restart (particle and/or field, should be combined with
     existing support in Charm++)
  3. Glob (text)
  4. Statistics
  5. PDFs, Joint PDFs, Marginal PDFs, Conditional PDFs, etc.

Output policies
---------------
  1. New timestep overwrites existing file
  2. Multiple files for multiple time step data
  3. Store time evolution in single file

Input/Output requirements:
--------------------------
  1. __Fields I/O:__
     - For large binary fields I/O we use ExodusII HDF5 (single file and
       multiple files), and Quinoa's native mesh format based on ADIOS schema
       and .bp format.
     - For Exodus I/O we use the Seacas/ExodusII library in Trilinos.

  2. __Particles I/O:__
     - For large binary particle I/O we will explore H5Part (http://vis.lbl.gov/
       Research/H5Part), a particle-centric I/O format based on HDF5.
     - We may also develop a native particles format based on ADIOS schema and
       .bp format.

  3. __Fields + Particles I/O:__
     - For large binary field + particle I/O (same or separate file) the plan is
       to use the ADIOS library (https://www.olcf.ornl.gov/center-projects/adios),
       which facilitates both file-based and stream-based I/O.
     - The stream-based ADIOS I/O API can then be used for both file-based and
       stream-based I/O, the latter facilitating staging and in-situ
       visualization (and debugging), e.g., via DataSpaces, NSSI, DataTap,
       DIMES, FlexPath, and/or ParaView/Catalyst.
     - We will develop our native fields + particles format based on ADIOS
       schema and .bp format.
     - Using the ADIOS visualization schema (or pulling our own) we will write
       our own ParaView reader plugin(s).

<hr>
<div><small>
<em>Page last updated:</em> Fri 30 Jan 2015 09:32:33 PM MST
<em>Copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.</em>
</small></div>
*/
