* Parser/Control:
    - Document remaining undocumented keywords
    - Replace the overloads in Control.h with variadic ones
    - Warn on what is set ends up not being used
    - Add logger: Useful? Requirements? Pantheios? Glog? Boost.Log?
    - Operator << for tagged tuple (e.g., for debugging purposes)? See STL 5.1.3
    - Add stringstream-based throw
    - Would raw-string literals work for keywords in-code documentation?
    - Automatic generation of grammar/parser documentation

* RNGTest:
    - Time RNGs during batteries and output their cost as a result beside pvals
    - RNGSSE:
        o Put in gaussian()
        o Can RNGSSE's generators take a seed?
        o Hook up SSE versions
        o Hook up GPU versions

* Testing:
    - Unit tests: GoogleTest, QuickTest, Template Unit Test
    - Regression tests
    - Test suite for exceptions:
        o Automatically switch each potential throw location into a throw and
          test for clean exit (e.g. with valgrind)
        o valgrind can return a different exit code based on errors detected
          using the command line argument --error-exitcode= to valgrind
    - Clang's static-, address-, thread-, and memory-sanitizer

* Build:
    - Reduce build deps with ninja build dependency map
    - Explore dynamic libs, precompiled headers
      (https://github.com/ducakar/openzone/ uses pch cmake and clang)
    - Pass -O3 for configure-based TPL builds
    - Revisit intel-specific compiler arguments; make all non-global if possible
    - Switch as many TPLs to optional as make sense
    - Echo "all optional libraries found" or what's missing at what path
    - Make executables optional
    - Make children of MonteCarlo optional
    - Make children of SDEs optional
    - Make coefficients policies optional
    - Document what is optional

* Are cout warnings in destructors' catch blocks exception-safe?

* Use noexcept and conditional noexcept. See STL 3.1.7.

* Fix Timer. See STL 5.7. Also add clocks info. See STL 5.7.3.

* valarrays eligible for more aggressive optimizations, especially on multicore?

* Any libs for concurrent containers? Would be nice for PDF/JPDF. TBB.

* RNG requirements (needs more explanation):

  Nth x Nppt x Nepp x Nt
  Nth ~ Nn x (Nctpn + Natpn)

  Nppt ~ 
  Nepp ~ 10^1 -- 10^6
  Nt ~ 10^9

  NRG MRG32K3A: Nth = 10^19, L = 10^38
      MT19937 : Nth = 10^19, L = 10^130

  Titan:
    Nth ~ 10^9
    Nn = 2x10^4, Nctpn = 16, Natpn = 3x10^3
  Sequioa:
    Nth ~ 10^6
    Nn = 1x10^5, Nctpn = 16
  Tianhe-2:
    Nth ~ 3x10^6
    Nn = 1.6x10^4, Nctpn = 12, Nactpn = 3x61
