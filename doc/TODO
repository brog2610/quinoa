* Parser/Control:
    - Warn on what is set ends up not being used
    - Add operator << for tagged tuple (e.g., for debugging purposes)? See STL
      5.1.3.
    - Add logger: Pantheios? Glog? Boost.Log? Requirements?
    - Echo of call-trace from Exception is hard-coded, make it optional (e.g.,
      from command-line argument, e.g., via verbosity level?)
    - Command line argument parser library or PEGTL?
    - Replace the overloads in Control.h with variadic ones
    - Fix echo of underlying compiler

* Add runtime enviroment echo to Quinoa.C

* Error/Exception handling: Can we get rid of Exception macros?

* Alternative RND library: Need a quick switchable way of building without MKL
  as it is practically impossible to distinguish between memory leaks (hopefully
  false positives) in MKL and non-MKL code. May need to implement another random
  number library.

* Testing:
    - Unit tests: GoogleTest, QuickTest, Template Unit Test
    - Regression tests:

* Test suite for exceptions:
    - Automatically switch each potential throw location into a throw and test
      for clean exit (e.g. with valgrind)
    - valgrind can return a different exit code based on errors detected using
      the command line argument --error-exitcode= to valgrind

* Faster build:
    - Remove unnecessary includes
    - Explore dynamic libs, precompiled headers
    - Reduce build deps with ninja build dependency map

* unique_ptr to avoid having to explicitly free pointers in destructors. See
  also Item 2/9.

* Are cout warnings in destructors' catch blocks exception-safe?

* Use noexcept and conditional noexcept. See STL 3.1.7.

* Fix Timer. See STL 5.7. Also add clocks info. See STL 5.7.3.

* valarrays eligible for more aggressive optimizations, especially on multicore?

* Any libs for concurrent containers? Would be nice for PDF/JPDF.
