* Parser/Control:
    - Need some kind of a pretty printer class that can print program name,
      headers, items, etc.
    - Echo what ends up being used instead of what is parsed
    - Warn on what is set ends up not being used
    - More sensible/readable error handling during/after parsing
    - Add operator << for tagged tuple (e.g., for debugging purposes)? See STL
      5.1.3.
    - Automatically turn list of keywords into Keywords.h, could use constexpr
      functions and/or classes and variadic templates? See Appendix in
      Concurrency in Action

* Bundle up (Memory, Paradigm, Control, Timer)

* Error/Exception handling:
    - Can we get rid of Exception macros?
    - Define own error handler for the new operator via set_new_handler(), and
      also customize set_unexpected(), set_terminate().
    - Reuse exception handling code. See STL 4.3.2.

* Alternative RND library: Need a quick switchable way of building without MKL
  as it is practically impossible to distinguish between memory leaks (hopefully
  false positives) in MKL and non-MKL code. May need to implement another random
  number library.

* Testing: Don't know how long I can keep going without some sort of unit and/or
  regression testing infrastructure.

* Test suite for exceptions:
    - Automatically switch each potential throw location into a throw and test
      for clean exit (e.g. with valgrind)
    - valgrind can return a different exit code based on errors detected using
      the command line argument --error-exitcode= to valgrind

* Unit tests: GoogleTest, QuickTest, Template Unit Test

* Faster build:
    - Explore dynamic libs, precompiled headers
    - Reduce build deps with ninja build dependency map
    - Setup precompiled headers

* Fix up MemoryEntry with smart pointer features: construction, assignment,
  automatic destruction as leaving scope, dereferencing, testing nullness. See
  Item 2/28.

* auto_ptr to avoid having to explicitly free pointers in destructors. See Item
  2/9.

* Are cout warnings in destructors' catch blocks exception-safe?

* Use noexcept and conditional noexcept. See STL 3.1.7.

* Fix Timer. See STL 5.7. Also add clocks info. See STL 5.7.3.

* valarrays eligible for more aggressive optimizations, especially on multicore?

* Any libs for concurrent containers? Would be nice for PDF/JPDF.
