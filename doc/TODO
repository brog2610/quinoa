* Control: Control::Bundle would be nicer with a hierarchical structure.

* Separate parser/grammar for rndtest and quinoa, e.g., QuinoaParser,
  RndTestParser, etc.

* Alternative RND library: Need a quick switchable way of building without MKL
  as it is practically impossible to distinguish between memory leaks (hopefully
  false positives) in MKL and non-MKL code. May need to implement another random
  number library.

* Testing: Don't know how long I can keep going without some sort of unit and/or
  regression testing infrastructure.

* test suite for exceptions: automatically switch each potential throw location
  into a throw and test for clean exit (e.g. with valgrind)
    - valgrind can return a different exit code based on errors detected using
      the command line argument --error-exitcode= to valgrind

* Unit tests: GoogleTest, QuickTest, Template Unit Test

* Faster build: explore dynamic libs, less and larger libs, precompiled headers,
  reduce build  deps with ninja build dependency map

* Setup precompiled headers?

* Less libraries?

* Define own error handler for the new operator via set_new_handler(), and
  also customize set_unexpected(), set_terminate().

* Automatically turn list of keywords into Keywords.h, could use constexpr
  functions and/or classes and variadic templates? See Appendix in
  ConcurrencyInAction.

* Fix up MemoryEntry with smart pointer features: construction, assignment,
  automatic destruction as leaving scope, dereferencing, testing nullness. See
  Item 2/28.

* auto_ptr to avoid having to explicitly free pointers in destructors. See Item
  2/9.

* Are cout warnings in destructors' catch blocks exception-safe?

* Use noexcept and conditional noexcept. See STL 3.1.7.

* Reuse exception handling code. See STL 4.3.2.

* Add operator << for tuple. See STL 5.1.3.

* Fix Timer. See STL 5.7. Also add clocks info. See STL 5.7.3.

* valarrays eligible for more aggressive optimizations, especially on multicore?

* Any libs for concurrent containers? Do we need any?
